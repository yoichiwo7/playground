#!/usr/bin/env python3
import csv as csv_mod
import json
import glob
import os
from os.path import isdir, isfile
import sys

import click

import plogpy

g_max_sample = None


@click.group()
@click.option(
    "--samples",
    default=512,
    help="Max data samples for chart. Exceeded data samples will be downsampled. Default value is 512.",
)
def plogpy_cmd(samples):
    """
    CLI tool for generating excel/csv/json from performance log.
    """
    global g_max_sample
    g_max_sample = int(samples)


@plogpy_cmd.command()
@click.option("--each", is_flag=True, help="Add more charts for each series.")
def tryit(each):
    """
    Generate excel file from sample log files.
    """
    log_dir = "log_sample"
    report_dir = "report_sample"
    logs = glob.glob(f"{log_dir}/*")
    reports = []

    if not os.path.exists(report_dir):
        os.mkdir(report_dir)

    for path in logs:
        headpath, ext = os.path.splitext(path)
        headpath = headpath.replace(log_dir, report_dir)
        ext = ".xlsx"
        reports.append(headpath + ext)

    for log, report in zip(logs, reports):
        print(f"- Parsing - {log}")
        if True:
            plogpy.generate_excel_report(
                log, report, each_chart=each, max_samples=g_max_sample
            )
        else:
            plogpy.generate_html_report(log, report, max_samples=g_max_sample)


# TODO: add report type -> ["xlsx", "html"]
@plogpy_cmd.command()
@click.argument("in_path", type=click.Path(exists=True, dir_okay=True))
@click.argument("out_path", type=click.Path(exists=False, dir_okay=True))
@click.option("--recursive", is_flag=True, help="Check log directory recursively.")
@click.option("--each", is_flag=True, help="Add more charts for each series.")
def report(in_path, out_path, recursive, each):
    """
    Generate report file.
    Statistics and charts can be added by option.
    """
    dir_mode = False

    # file/file
    if isfile(in_path) and not isdir(out_path):
        in_out_pairs = [(in_path, out_path)]
    elif isdir(in_path) and isdir(out_path):
        dir_mode = True
        in_out_pairs = []
        if recursive:
            # TODO:
            for dirpath, _, files in os.walk(in_path):
                for f in files:
                    ipath = os.path.join(in_path, dirpath, f)
                    opath = os.path.join(out_path, dirpath, f) + ".xlsx"
                    in_out_pairs.append((ipath, opath))
        else:
            for f in os.listdir(in_path):
                ipath = os.path.join(in_path, f)
                if not isfile(ipath):
                    continue
                outfile = f + ".xlsx"
                opath = os.path.join(out_path, outfile)
                in_out_pairs.append((ipath, opath))
    else:
        print("Error: incorrect in/out. 'file/file' or 'dir/dir' is supported.")
        sys.exit(1)

    for ipath, opath in in_out_pairs:
        if dir_mode and not plogpy.is_parsable(ipath):
            continue
        print(f"Parsing: in={ipath}, out={opath}")
        # TODO: support multiprocessing
        plogpy.generate_excel_report(
            ipath, opath, max_samples=g_max_sample, each_chart=each
        )


# TODO: maybe also show matching log pattern?
@plogpy_cmd.command("list")
def supported_list():
    """
    List supported all log types.
    """
    supported_logs = plogpy.get_supported_log_types()
    print("Supported log types:")
    for log in supported_logs:
        print(f"  - {log}")


@plogpy_cmd.command()
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.option("--stats", is_flag=True, help="Output statistics CSV string.")
def csv(in_file, stats):
    """
    Output CSV string.
    """
    df = plogpy.parse_log(in_file)
    if stats:
        df = df.describe()
    df.to_csv(path_or_buf=sys.stdout, quoting=csv_mod.QUOTE_NONNUMERIC)


@plogpy_cmd.command("json")
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.option("--stats", is_flag=True, help="Output statistics JSON string.")
def to_json(in_file, stats):
    """
    Output JSON string.
    """
    json_obj = plogpy.generate_json(in_file, stats)
    print(json.dumps(json_obj, indent=None))


@plogpy_cmd.command("html")
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.argument("out_file", type=click.Path(exists=False, dir_okay=False))
def to_html(in_file, out_file):
    """
    Output HTML.
    """
    plogpy.generate_html_report(
        in_file, out_file, max_samples=g_max_sample, html_type="chartjs"
    )


def main():
    plogpy_cmd()


if __name__ == "__main__":
    main()
