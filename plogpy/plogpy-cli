#!/usr/bin/env python3
import collections
import csv as csv_mod
import glob
import json
import os
import sys

import click
import pandas as pd

import plogpy


@click.group()
def plogpy_cmd():
    """
    CLI tool for generating excel/csv/json from performance log.
    """
    pass


@plogpy_cmd.command()
def tryit():
    """
    Generate excel file from sample log files.
    """
    log_dir = "log_sample"
    report_dir = "report_sample"
    logs = glob.glob(f"{log_dir}/*")
    reports = []

    if not os.path.exists(report_dir):
        os.mkdir(report_dir)

    for path in logs:
        headpath, ext = os.path.splitext(path)
        headpath = headpath.replace(log_dir, report_dir)
        ext = ".xlsx"
        reports.append(headpath + ext)
    
    for log, report in zip(logs, reports):
        plogpy.generate_excel_report(log, report)


#TODO: option
@plogpy_cmd.command()
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.argument("out_file", type=click.Path(exists=False, dir_okay=False))
@click.option('--data/--no-data', default=True, help="Add data sheet. (default: --data)")
@click.option('--stats/--no-stats', default=True, help="Add statistics sheet. (default: --stats)")
@click.option('--chart/--no-chart', default=True, help="Add Chart sheet. (default: --chart)")
@click.option('--png', is_flag=True, help="Turn excel chart to png images.")
@click.option('--each', is_flag=True, help="Add more charts for each series.")
def excel(in_file, out_file, data, stats, chart, png, each):
    """
    Generate excel file.
    Statistics and charts can be added by option.
    """

    #TODO: add resample options. num=5, type=max/average/etc...

    plogpy.generate_excel_report(in_file, out_file,
        enable_data_sheet=data,
        enable_stats_sheet=stats,
        enable_chart_sheet=chart,
        use_png=png,
        each_chart=each)


# TODO: maybe also show matching log pattern?
@plogpy_cmd.command("list")
def supported_list():
    """
    List supported all log types.
    """
    supported_logs = plogpy.get_supported_log_types()
    print("Supported log types:")
    for log in supported_logs:
        print(f"  - {log}")


@plogpy_cmd.command()
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.option('--stats', is_flag=True, help="Output statistics CSV string.")
def csv(in_file, stats):
    """
    Output CSV string.
    """
    df = plogpy.parse_log(in_file)
    if stats:
        df = df.describe()
    df.to_csv(path_or_buf=sys.stdout, quoting=csv_mod.QUOTE_NONNUMERIC)


@plogpy_cmd.command()
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.option('--stats', is_flag=True, help="Output statistics JSON string.")
def json(in_file, stats):
    """
    Output JSON string.
    """
    df = plogpy.parse_log(in_file)
    if stats:
        df = df.describe()
    columns = df.columns.tolist()
    #TODO: not suited for large data. make it more efficient?
    d = {}
    d["index"] = df.index.tolist()
    d["column"] = [str(col) for col in columns]
    d["data"] = { str(col):df[col].values.tolist() for col in columns}
    print(json.dumps(d, indent=4))


@plogpy_cmd.command()
@click.argument("in_file", type=click.Path(exists=True, dir_okay=False))
@click.argument("out_dir", type=click.Path(exists=True, dir_okay=True, file_okay=False))
@click.option('--format', default="png", help="Generate PNG image. (Default)")
def image(in_file, out_dir, format):
    """
    Generate image files.
    """
    # TODO:
    #plogpy.generate_images(in_file)


def main():
    plogpy_cmd()


if __name__ == '__main__':
    main()